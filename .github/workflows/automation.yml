name: Deploy meq web app to DigitalOcean Droplet

on:
 push:
  branches:
    - main

jobs:
 build-and-deploy:
  runs-on: ubuntu-latest

  steps:
   # checkout code
   - name: Checkout code
     uses: actions/checkout@v3

   # set up docker Buildx
   - name: Set up Docker Buildx
     uses: docker/setup-buildx-action@v3

   # log in to Docker Hub
   - name: Log in to Docker Hub
     uses: docker/login-action@v3
     with:
       username: ${{ secrets.DOCKERHUB_USERNAME }}
       password: ${{ secrets.DOCKERHUB_TOKEN }}

   # build and push Djang app image
   - name: Build and push Django app
     uses: docker/build-push-action@v5
     with:
       context: .
       file: ./Dockerfile
       push: true
       tags: ${{ secrets.DOCKERHUB_USERNAME }}/meq-data-app:${{ github.sha }}
       cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/meq-data-app:buildcache
       cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/meq-data-app:buildcache,mode=max

   # Build and push Nginx image
   - name: Build and push Nginx
     uses: docker/build-push-action@v5
     with:
      context: .
      file: ./Dockerfile.nginx
      push: true 
      tags: ${{ secrets.DOCKERHUB_USERNAME }}/app-nginx:${{ github.sha }}
      cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app-nginx:buildcache
      cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app-nginx:buildcache,mode=max

   # Deploy to DigitalOcean Droplet
   - name: Deploy to Droplet
     uses: appleboy/ssh-action@v1.0.3
     with:
      host: ${{ secrets.DO_HOST }}
      username: ${{ secrets.DO_USER }}
      key: ${{ secrets.DO_SSH_KEY }}
      script: |
       # log in to Docker Hub
       echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}"  --password-stdin

       echo "Logged in to Docker Hub"

       # Create .env file with environment variables
       cat << EOF > .env
       # Django Settings
       DEBUG=False
       DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
       DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
       DJANGO_CSRF_TRUSTED_ORIGINS=http://localhost:8001
       
       # Database Setting
       DB_ENGINE=django.contrib.gis.db.backends.postgis
       DB_NAME=${{ secrets.DB_NAME }}
       DB_USERNAME=${{ secrets.DB_USERNAME }}
       DB_PASSWORD=${{ secrets.DB_PASSWORD }}
       DB_HOST=db
       DB_PORT=5432
       DATABASE_URL=${{ secrets.DB_URL }}

       # Postgres Setting
       POSTGRES_USER=${{ secrets.DB_USERNAME }}
       POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
       POSTGRES_DB=${{ secrets.DB_NAME }}

       # Token
       MAPBOX_API_TOKEN=${{ secrets.MAPBOX_API_TOKEN }}

       # GDAL Library Path
       GDAL_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/libgdal.so

       # Gunicorn Variables
       GUNICORN_WORKERS=3
       GUNICORN_PORT=8000

       EOF

       echo "Environment variable (.env) created..."

       # copy docker-compose.yml to droplet
       cat << EOF > docker-compose.yml
       version: '3.9'
       services:
        web:
         image: ${{ secrets.DOCKERHUB_USERNAME }}/meq-data-app:latest
         env_file:
          - .env
         volumes:
          - static_volume:/home/app/web/static
          - media_volume:/home/app/web/media
         depends_on:
          - db
         networks:
          - app-network
        db:
         image: postgis/postgis:16-3.4
         env_file:
          - .env
         ports:
          - "5433:5432"
         volumes:
          - postgres_data:/var/lib/postgresql/data
         networks: 
          - app-network
        nginx:
         image: ${{ secrets.DOCKERHUB_USERNAME }}/app-nginx:latest
         ports:
          - "8000:80"
         volumes:
          - static_volume:/home/app/web/static
          - media_volume:/home/app/web/media
         depends_on:
          - web
         networks:
          - app-network
       volumes:
        postgres_data:
        static_volume:
        media_volume:
       networks:
        app-network:
         driver: bridge
       
       EOF

       echo "docker-compose.yml created..."
       
       # Deploy with Docker Compose
       docker-compose --project-name meq-data-app down --remove-orphans
       docker-compose --project-name meq-data-app pull
       docker-compose --project-name meq-data-app up -d

       echo "Deployment completed succesfully."
   

