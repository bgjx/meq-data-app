name: Build Docker Images and Deploy to DigitalOcean Droplet

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  APP_NAME: meq-data-app
  NGINX_NAME: app-nginx
  REGISTRY: docker.io

jobs:          
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set tags environment variable
        id: set-tags
        run: |
          echo "DEBUG: GITHUB_REF=$GITHUB_REF"
          VERSION=${GITHUB_REF#refs/tags/}
          echo "app_tag=${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${VERSION}" >> $GITHUB_OUTPUT
          echo "app_tag_latest=${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "nginx_tag=${{ env.DOCKERHUB_USERNAME }}/${{ env.NGINX_NAME }}:${VERSION}" >> $GITHUB_OUTPUT
          echo "nginx_tag_latest=${{ env.DOCKERHUB_USERNAME }}/${{ env.NGINX_NAME }}:latest" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Verify Docker Hub Login
        run: |
          if ! docker pull hello-world; then
            echo "Error: Docker login failed"
            exit 1
          fi 

      - name: Build and push Django app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.set-tags.outputs.app_tag }},${{ steps.set-tags.outputs.app_tag_latest }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:buildcache,mode=max

      - name: Build and push Nginx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.nginx
          push: true 
          tags: ${{ steps.set-tags.outputs.nginx_tag }},${{ steps.set-tags.outputs.nginx_tag_latest }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ env.NGINX_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ env.NGINX_NAME }}:buildcache,mode=max
  
  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Droplet
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_TAG: ${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.ref_name }}
          NGINX_TAG: ${{ env.DOCKERHUB_USERNAME }}/${{ env.NGINX_NAME }}:${{ github.ref_name }}
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          envs: APP_TAG,NGINX_TAG
          script: |
            # log in to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}"  --password-stdin

            echo "Logged in to Docker Hub"

            # Create .env file with environment variables
            cat << EOF > .env
            # Django Settings
            DEBUG=False
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}
            DJANGO_CSRF_TRUSTED_ORIGINS=${{ secrets.DJANGO_CSRF_TRUSTED_ORIGINS }}
            
            # Database Setting
            DB_ENGINE=django.contrib.gis.db.backends.postgis
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{secrets.DB_HOST }}
            DB_PORT=5432
            DATABASE_URL=${{ secrets.DB_URL }}

            # Postgres Setting
            POSTGRES_USER=${{ secrets.DB_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.DB_NAME }}

            # Token
            MAPBOX_API_TOKEN=${{ secrets.MAPBOX_API_TOKEN }}

            # GDAL Library Path
            GDAL_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/libgdal.so

            # Gunicorn Variables
            GUNICORN_WORKERS=3
            GUNICORN_PORT=8000

            # Open AI API key
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            EOF

            echo "Environment variable (.env) created..."

            # copy docker-compose.yml to droplet
            cat << EOF > docker-compose.yml
            version: '3.9'
            services:
              web:
                image: ${APP_TAG}
                env_file:
                  - .env
                volumes:
                  - log_volume: /home/app/web/logs
                  - static_volume:/home/app/web/static
                  - media_volume:/home/app/web/media
                depends_on:
                    db:
                      condition: service_healthy
                networks:
                  - app-network
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                  interval: 30s
                  timeout: 15s
                  retries: 3
              db:
                image: postgis/postgis:16-3.4
                env_file:
                  - .env
                ports:
                  - "5433:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                networks: 
                  - app-network
                healthcheck:
                  test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
              nginx:
                image: ${NGINX_TAG}
                ports:
                  - "8000:80"
                volumes:
                  - static_volume:/home/app/web/static
                  - media_volume:/home/app/web/media
                depends_on:
                  web:
                    condition: service_healthy
                networks:
                  - app-network
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            volumes:
              postgres_data:
              static_volume:
              media_volume:
            networks:
              app-network:
                driver: bridge
            EOF

            echo "docker-compose.yml created..."
            
            # Deploy with Docker Compose
            docker-compose --project-name meq-data-app down --remove-orphans
            docker-compose --project-name meq-data-app pull
            docker-compose --project-name meq-data-app up -d --force-recreate

            # clean up unused images
            docker image prune -f

            echo "Deployment completed successfully."
   

