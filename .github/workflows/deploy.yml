name: Deploy to DigitalOcean Droplet

on:
 push:
  branches:
    - main

jobs:
 build-and-deploy:
  runs-on: ubuntu-latest

  steps:
   # checkout code
   - name: Checkout code
     uses: actions/checkout@v4

   # set up docker Buildx
   - name: Set up Docker Buildx
     uses: docker/setup-buildx-action@v3

   # log in to Docker Hub
   - name: Log in to Docker Hub
     uses: docker/login-action@v3
     with:
       username: ${{ secrets.DOCKERHUB_USERNAME }}
       password: ${{ secrets.DOCKERHUB_TOKEN }}

   # build and push Djang app image
   - name: Build and push Django app
     uses: docker/build-push-action@v5
     with:
       context: .
       file: ./Dockerfile
       push: true
       tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-django-app:latest

   # Build and push Nginx image
   - name: Build and push Nginx
     uses: docker/build-push-action@v5
     with:
      context: .
      file: ./Dockerfile.nginx
      push: true 
      tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-django-nginx:latest

   # Deploy to DigitalOcean Droplet
   - name: Deploy to Droplet
     uses: appleboy/ssh-action@v1.0.3
     with:
      host: ${{ secrets.DO_HOST }}
      username: ${{ secrets.DO_USER }}
      key: ${{ secrets.DO_SSH_KEY }}
      script: |
       # log in to Docker Hub
       echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}"  --password-stdin

       # Create .env file with environment variables
       echo "DATABASE_URL=postgresql://se_user:se_admin_25@db:5432/se_db"
       echo "GUNICORN_WORKERS=3" >> .env
       echo "GUNICORN_PORT=8000" >> .env

       # copy docker-compose.yml to droplet
       cat << 'EOF' > docker-compose.yml
       version: '3.9'
       services:
        web:
         image: ${{ secrets.DOCHERHUB_USERNAME }}/my-django-app:latest
         environment:
          - DATABASE_URL=${DATABASE_URL}
          - GUNICORN_WORKERS=${GUNICORN_WORKERS}
          - GUNICORN_PORT=${GUNICORN_PORT}
         volumes:
          - static_volume:/home/app/web/static
          - media_volume:/home/app/web/media
         depends_on:
          - db
         networks:
          - app-network
        db:
         image: postgres:16
         environment:
          - POSTGRES_USER=${{ secrets.DB_USERNAME }}
          - POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          - POSTGRES_DB=${{ secrets.DB_NAME }}
         volumes:
          - postgres_data:/var/lib/postgresql/data
         networks: 
          - app-network
        nginx:
         image: ${{ secrets.DOCKERHUB_USERNAME }}/my-django-nginx:latest
         ports:
          - "80:80"
         volumes:
          - static_volume:/home/app/web/static
          - media_volume:/home/app/web/media
         depends_on:
          - web
         networks:
          - app-networks
       volumnes:
        postgres_data:
        static_volume:
        media_volume:
       networks:
        app-network:
         driver: bridge
       
       EOF
       
       # Deploy with Docker Compose
       docker-compose down
       docker-compose up -d
   

